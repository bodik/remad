#!/usr/bin/python
"""remadd -- remctl admin daemon"""

import argparse
import base64
import inspect
import json
import logging
import os
import re
import shlex
import subprocess
import sys
import tempfile






### kadmin automation
###
class Kadmin(object):
	"""root class for kadmin automation"""

	def __init__(self, realm, admin_keytab, admin_principal, kadmin_binary):
		self.log = logging.getLogger()
		self.realm = realm
		self.admin_keytab = admin_keytab
		self.admin_principal = admin_principal
		self.kadmin_binary = kadmin_binary


	@staticmethod
	def guess_realm(host):
		"""guess host realm by longest match of host vs domain name-realm mapping"""

		if host.find("@") != -1:
			return host.split("@")[-1]

		# cannot be parsed by ConfigParser due to realm syntax
		guessed_realm = {"domain": "", "realm": None}
		section = None
		with open("/etc/krb5.conf", "r") as tmpfile:
			data = [x.strip() for x in tmpfile.readlines()]
		for line in data:
			match = re.search(r"\[(?P<section>.*)\]", line)
			if match:
				section = match.group("section")
				continue

			if (section == "domain_realm") and line:
				(domain, realm) = [x.strip() for x in line.split("=")]
				# most specific match must win
				if (host.find(domain) > -1) and (len(domain) >= len(guessed_realm["domain"])):
					guessed_realm = {"domain": domain, "realm": realm}

		return guessed_realm["realm"]


	# TODO: remove backward compatibility after upgrade
	@staticmethod
	def check_output(*popenargs, **kwargs):
		"""implementation taken from python2.7, because lack of the methon in python2.6 version"""

		if 'stdout' in kwargs:
			raise ValueError('stdout argument not allowed, it will be overridden.')
		process = subprocess.Popen(stdout=subprocess.PIPE, stderr=subprocess.PIPE, *popenargs, **kwargs)
		output, unused_err = process.communicate()
		retcode = process.poll()
		if retcode:
			cmd = kwargs.get("args")
			if cmd is None:
				cmd = popenargs[0]
			raise subprocess.CalledProcessError(retcode, cmd, output=output)
		return output



class KadminMit(Kadmin):
	"""remad kadmin implementation for MIT Kerberos"""

	def exec_kadmin(self, command):
		"""execute kadmin command"""

		cmd = "{kadmin} -r {realm} -p {admin_principal} -k -t {admin_keytab} {command}".format( \
			kadmin=self.kadmin_binary,
			realm=self.realm, admin_principal=self.admin_principal, admin_keytab=self.admin_keytab,
			command=command)
		self.log.debug(cmd)
		return Kadmin.check_output(shlex.split(cmd))


	def list_principals(self, principal):
		"""list principals, returns list"""

		principals = self.exec_kadmin("list_principals %s" % principal).splitlines()
		return principals


	def add_principal(self, principal):
		"""add principal, handle special case for nfs"""

		# TODO: clarify reasons for nfs case, still needed ?
		service = principal.split("/")[0]

		opts = []
		if service == "nfs":
			opts.append("-e des-cbc-crc:v4")

		return self.exec_kadmin("add_principal -randkey -policy default_nohistory +requires_preauth {opts} {principal}@{realm}".format( \
			principal=principal, realm=self.realm, opts=" ".join(opts)))


	def ktadd(self, principal, path_keytab):
		"""add key to keytab, don't change the key"""

		return self.exec_kadmin("ktadd -norandkey -k {path} {principal}@{realm}".format(path=path_keytab, principal=principal, realm=self.realm))



class KadminHeimdal(Kadmin):
	""" remad kadmin implementation for Heimdal Kerberos """

	def exec_kadmin(self, command):
		"""execute kadmin command"""

		cmd = "{kadmin} --realm={realm} --principal={admin_principal} --keytab={admin_keytab} {command}".format( \
			kadmin=self.kadmin_binary,
			realm=self.realm, admin_principal=self.admin_principal, admin_keytab=self.admin_keytab,
			command=command)
		self.log.debug(cmd)
		return Kadmin.check_output(shlex.split(cmd))


	def list_principals(self, principal):
		"""list principals, returns list"""

		try:
			principals = self.exec_kadmin("list -l %s" % principal).splitlines()
		except Exception:
			principals = []
		return principals


	def add_principal(self, principal):
		"""add principal, handle special case for nfs"""

		service = principal.split("/")[0]

		ret = self.exec_kadmin("add --random-key --use-defaults {principal}@{realm}".format(principal=principal, realm=self.realm))

		if service == "nfs":
			ensure_enctypes = ["des-cbc-crc", "des-cbc-md5"]
			for enctype in ensure_enctypes:
				self.exec_kadmin("add_enctype --random-key {principal}@{realm} {enctype}".format(principal=principal, realm=self.realm, enctype=enctype))

			keytypes = self.exec_kadmin("get -s -o keytypes {principal}@{realm}".format(principal=principal, realm=self.realm))
			enctypes = [x.split("(")[0].strip() for x in keytypes.splitlines()[-1].split(",")]
			self.log.debug(enctypes)

			for enctype in enctypes:
				if enctype not in ensure_enctypes:
					self.exec_kadmin("del_enctype {principal}@{realm} {enctype}".format(principal=principal, realm=self.realm, enctype=enctype))
		return ret


	def ktadd(self, principal, path_keytab):
		"""add key to keytab, don't change the key"""

		return self.exec_kadmin("ext_keytab --keytab={path} {principal}@{realm}".format(path=path_keytab, principal=principal, realm=self.realm))






## remadd server
##
class Remadd(object):
	"""remad server class"""

	def __init__(self, config_file):
		self.log = logging.getLogger()

		self.remoteuser = os.getenv("REMOTE_USER", "unauthenticated")
		self.log.debug("authenticated as %s", self.remoteuser)

		# config defaults
		self.config = {"debug": False}
		# config file
		try:
			with open(config_file, "r") as ftmp:
				data = ftmp.readlines()
			stripcomments = "\n".join((l for l in data if not l.lstrip().startswith(("#", "//"))))
			self.config.update(json.loads(stripcomments))
		except Exception as e:
			self.log.error("parse config: %s", e.message)
			raise

		if self.config["debug"]:
			self.log.setLevel(logging.DEBUG)


	def kadmin_factory(self, principal):
		""" returns configured class based on realm from principal"""
		realm = Kadmin.guess_realm(principal)
		try:
			# instantantiate proper kadmin class with config
			return globals()[self.config["realm"][realm]["type"]]( \
				realm,
				self.config["realm"][realm]["keytab"],
				self.config["realm"][realm]["principal"],
				self.config["binaries"][self.config["realm"][realm]["type"]])
		except Exception as e:
			raise Exception("realm %s not fully configured", realm, e.message)


	def is_authorized(self, **kwargs):
		""" authorization routine, checks all kwargs against regexps from global config for given caller function """

		class NotAuthorizedException(Exception):
			""" raised when user is not authorized to perform requested action """

		def check_by_regexp(regexp, value):
			""" evaluate value to regexp respecting type of value """
			if isinstance(value, list):
				for item in value:
					if not re.match(regexp, item):
						return False
			else:
				if not re.match(regexp, value):
					return False
			return True


		# is_authorized impl
		caller = inspect.currentframe().f_back.f_code.co_name
		if caller not in self.config["acls"]:
			raise NotAuthorizedException("is_authorized denied %s to %s:%s" % (self.remoteuser, caller, kwargs))

		# evaluate every acl for given command
		for acl in self.config["acls"][caller]:
			if acl["group"] not in self.config["groups"]:
				continue

			# if user is in group check all arguments passed by the caller
			if self.remoteuser in self.config["groups"][acl["group"]]:
				kwargs_result = [check_by_regexp(acl[argname], argvalue) for argname, argvalue in kwargs.iteritems()]
				# and if all arguments matches, result as permitted
				if all(kwargs_result):
					self.log.debug("is_authorized permitted %s to %s:%s", self.remoteuser, caller, kwargs)
					return True

		# no match has been found >> default deny
		raise NotAuthorizedException("is_authorized denied %s to %s:%s" % (self.remoteuser, caller, kwargs))




	def conftest(self):
		"""remadd conftest"""
		self.log.info("configuration ok")
		return 0


	def createkeytab(self, host, services):
		"""remad createkeytab"""
		self.is_authorized(host=host, services=services)


		kadmin = self.kadmin_factory(host)
		host = host.split("@")[0] # strip realm if present

		# create temporary filename
		with tempfile.NamedTemporaryFile(prefix="%s-getkeytab-" % os.path.basename(sys.argv[0])) as tmpkeytab:
			path_tmpkeytab = tmpkeytab.name

		# upsert principals and create keytab
		for service in services:
			principal = "%s/%s" % (service, host)
			tmp = kadmin.list_principals(principal)
			if not tmp:
				self.log.debug("must create %s@%s", principal, kadmin.realm)
				kadmin.add_principal(principal)

			kadmin.ktadd(principal, path_tmpkeytab)

		# return the keytab
		with open(path_tmpkeytab, "r") as tmpfile:
			print base64.b64encode(tmpfile.read())
		os.unlink(path_tmpkeytab)

		return 0



	def storesshhostkey(self, host, filename, data):
		"""remad storesshhostkey"""
		self.is_authorized(host=host, filename=filename)

		destfile = os.path.realpath("%s/%s/%s" % (self.config["ssh-key-storage"], host, filename))
		if not destfile.startswith(self.config["ssh-key-storage"]):
			raise Exception("invalid storage destination")

		if not os.path.exists(os.path.dirname(destfile)):
			os.makedirs(os.path.dirname(destfile))

		with open(destfile, "w") as tmpfile:
			tmpfile.write(base64.b64decode(data))
		os.chmod(destfile, 0600)

		self.log.debug("%s:%s stored in %s", host, filename, destfile)
		return 0



	def getsshhostkey(self, host, filename):
		""" remad getsshhostkey """
		self.is_authorized(host=host, filename=filename)

		sourcefile = os.path.realpath("%s/%s/%s" % (self.config["ssh-key-storage"], host, filename))
		if not sourcefile.startswith(self.config["ssh-key-storage"]):
			raise Exception("invalid storage source")

		with open(sourcefile, "r") as tmpfile:
			print base64.b64encode(tmpfile.read())
		self.log.debug("%s read from %s:%s", filename, host, sourcefile)

		return 0








### main and utils
###

def parse_arguments():
	"""parse command line arguments"""

	parser = argparse.ArgumentParser()

	parser_command = parser.add_subparsers(dest='command')

	_ = parser_command.add_parser("conftest", help="configtest help")

	command_createkeytab = parser_command.add_parser("createkeytab", help="createkeytab command help")
	command_createkeytab.add_argument("--host", required=True, help="create (upsert principals) keytab for hostname")
	command_createkeytab.add_argument("--services", required=True, nargs="+", help="create (upsert principals) keytab for services at hostname")

	command_storesshhostkey = parser_command.add_parser("storesshhostkey", help="createkeytab command help")
	command_storesshhostkey.add_argument("--host", required=True, help="hostname to store key for")
	command_storesshhostkey.add_argument("--filename", required=True, help="filename")
	command_storesshhostkey.add_argument("--data", required=False, help="base64 encoded data to store")

	command_getsshhostkey = parser_command.add_parser("getsshhostkey", help="getsshhostkey command help")
	command_getsshhostkey.add_argument("--host", required=True, help="get file for hostname")
	command_getsshhostkey.add_argument("--filename", required=True, help="filename to get from storage")

	return parser.parse_args()



def is_valid_host(value):
	"""validator"""

	if not re.match(r"^[a-zA-Z0-9@\.\-]+$", value):
		raise ValueError("invalid host")

def is_valid_service(value):
	"""validator"""

	regexp = r"^[a-zA-Z]+$"
	if isinstance(value, list):
		for item in value:
			if not re.match(regexp, item):
				raise ValueError("invalid service")
	else:
		if not re.match(regexp, value):
			raise ValueError("invalid service")

def is_valid_filename(value):
	"""validator"""

	if not re.match(r"^[a-zA-Z0-9_\.\-]+$", value):
		raise ValueError("invalid filename")

def is_valid_data(value):
	"""validator"""

	try:
		base64.b64decode(value)
	except:
		raise ValueError("invalid data")



def main():
	""" main """

	logging.basicConfig(level=logging.INFO, format=os.path.basename(sys.argv[0])+'[%(process)d] %(levelname)s %(message)s')
	args = parse_arguments()

	try:
		remadd = Remadd("/etc/remadd.conf")

		if args.command == "conftest":
			ret = remadd.conftest()

		elif args.command == "createkeytab":
			is_valid_host(args.host)
			is_valid_service(args.services)
			ret = remadd.createkeytab(args.host, args.services)

		elif args.command == "storesshhostkey":
			is_valid_host(args.host)
			is_valid_filename(args.filename)
			ret = remadd.storesshhostkey(args.host, args.filename, args.data)

		elif args.command == "getsshhostkey":
			is_valid_host(args.host)
			is_valid_filename(args.filename)
			ret = remadd.getsshhostkey(args.host, args.filename)

	except Exception as e:
		logging.getLogger().error(e)
		return 1

	return ret


if __name__ == "__main__":
	sys.exit(main())
