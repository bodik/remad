#!/usr/bin/python
"""remad -- remadd (remctl admin tool) client"""

import argparse
import base64
import logging
import logging.handlers
import os
import socket
import subprocess
import sys





class Remad(object):
	"""remad client class"""

	def __init__(self, server):
		self.log = logging.getLogger()
		self.server = server



	def remctlcall(self, cmd):
		"""wraps command with remctl client call and executes"""

		cmd = ["/usr/bin/remctl", self.server, "remadd"] + cmd
		proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		(proc_stdout, proc_stderr) = proc.communicate()
		return (proc, proc_stdout, proc_stderr)



	def createkeytab(self, host, services, outfile, rekey=False, outbase64=False):
		"""creates keytab for services/host to outfile"""

		cmd = ["createkeytab", "--host", host, "--services"] + services
		if rekey:
			cmd += ["--rekey"]

		(proc, proc_stdout, proc_stderr) = self.remctlcall(cmd)
		sys.stderr.write(proc_stderr)

		# data of created keytab are transfered via stdout encoded in base64
		self._write_outfile(outfile, base64.b64decode(proc_stdout), outbase64)
		self.log.debug("keytab for %s created in %s", host, outfile)

		return proc.returncode



	def storesshhostkey(self, host, filename, stdin):
		"""stores filename for host at keyserver"""

		if stdin:
			data = sys.stdin.read()
		else:
			with open(filename, "r") as ftmp:
				data = ftmp.read()

		# getconf ARG_MAX, xargs --show-limits, base64 encoding
		self.log.debug("stored filesize %d", len(data))
		if len(data) > 98000:
			raise Exception("file too big for remctl transfer")

		cmd = ["storesshhostkey", "--host", host, "--filename", os.path.basename(filename), "--data", base64.b64encode(data)]
		(proc, proc_stdout, proc_stderr) = self.remctlcall(cmd)
		sys.stderr.write(proc_stderr)
		sys.stdout.write(proc_stdout)
		self.log.debug("file %s stored for %s", filename, host)

		return proc.returncode



	def getsshhostkey(self, host, filename, outfile, outbase64=False):
		"""retrieves filename for host from keyserver"""

		cmd = ["getsshhostkey", "--host", host, "--filename", filename]
		(proc, proc_stdout, proc_stderr) = self.remctlcall(cmd)
		sys.stderr.write(proc_stderr)

		if proc.returncode == 0:
			self._write_outfile(outfile, base64.b64decode(proc_stdout), outbase64)
			self.log.debug("file %s for %s created in %s", filename, host, outfile)

		return proc.returncode



	def getknownhosts(self, outfile, outbase64=False):
		"""generates global ssh_known_hosts file from keystorage"""

		cmd = ["getknownhosts"]
		(proc, proc_stdout, proc_stderr) = self.remctlcall(cmd)
		sys.stderr.write(proc_stderr)

		if proc.returncode == 0:
			self._write_outfile(outfile, base64.b64decode(proc_stdout), outbase64)
			self.log.debug("known_hosts file created in %s", outfile)

		return proc.returncode



	@staticmethod
	def _write_outfile(outfile, data, outbase64=False):
		if outfile == "-":
			ftmp = sys.stdout
		else:
			ftmp = open(outfile, "w")
		if outbase64:
			data = base64.b64encode(data)
		ftmp.write(data)
		ftmp.close()



def parse_arguments():
	"""parses command line arguments"""

	parser = argparse.ArgumentParser()
	parser.add_argument("--server", default=socket.getfqdn(), help="remctladmd server")
	parser.add_argument("--debug", action="store_true", default=False, help="debug output")

	parser_command = parser.add_subparsers(dest='command')

	command_createkeytab = parser_command.add_parser("createkeytab", help="createkeytab command help")
	command_createkeytab.add_argument("--host", required=True, help="create (upsert principals) keytab for hostname")
	command_createkeytab.add_argument("--services", required=True, nargs="+", help="create (upsert principals) keytab for services at hostname")
	command_createkeytab.add_argument("--outfile", required=True, help="write created keytab to file; use - for stdout")
	command_createkeytab.add_argument("--rekey", action="store_true", default=False, help="force rekey")
	command_createkeytab.add_argument("--outbase64", action="store_true", default=False, help="format output in base64; used for pipes inside puppet")

	command_storesshhostkey = parser_command.add_parser("storesshhostkey", help="storesshhostkey command help")
	command_storesshhostkey.add_argument("--host", required=True, help="hostname to store key for")
	command_storesshhostkey.add_argument("--filename", required=True, help="filepath to store")
	command_storesshhostkey.add_argument("--stdin", action="store_true", default=False, help="read data from stdin")

	command_getsshhostkey = parser_command.add_parser("getsshhostkey", help="getsshhostkey command help")
	command_getsshhostkey.add_argument("--host", required=True, help="get file for hostname")
	command_getsshhostkey.add_argument("--filename", required=True, help="filename to get from storage")
	command_getsshhostkey.add_argument("--outfile", required=True, help="write fetched file to path; use - for stdout")
	command_getsshhostkey.add_argument("--outbase64", action="store_true", default=False, help="format output in base64; used for pipes inside puppet")

	command_getknownhosts = parser_command.add_parser("getknownhosts", help="getknownhosts command help")
	command_getknownhosts.add_argument("--outfile", required=True, help="write fetched file to path; use - for stdout")
	command_getknownhosts.add_argument("--outbase64", action="store_true", default=False, help="format output in base64; used for pipes inside puppet")

	return parser.parse_args()



def configure_logging():
	"""configure logging to default stream/stderr and syslog"""
	logger = logging.getLogger()
	logger.setLevel(logging.INFO)
	formatter = logging.Formatter(os.path.basename(sys.argv[0])+'[%(process)d]: %(levelname)s %(message)s')
	handler_stream = logging.StreamHandler()
	handler_syslog = logging.handlers.SysLogHandler(address="/dev/log")
	handler_stream.setFormatter(formatter)
	handler_syslog.setFormatter(formatter)
	logger.addHandler(handler_stream)
	logger.addHandler(handler_syslog)



def main():
	"""main"""

	configure_logging()
	args = parse_arguments()
	if args.debug:
		logging.getLogger().setLevel(level=logging.DEBUG)


	remad = Remad(args.server)
	if args.command == "createkeytab":
		ret = remad.createkeytab(args.host, args.services, args.outfile, args.rekey, args.outbase64)
	elif args.command == "storesshhostkey":
		ret = remad.storesshhostkey(args.host, args.filename, args.stdin)
	elif args.command == "getsshhostkey":
		ret = remad.getsshhostkey(args.host, args.filename, args.outfile, args.outbase64)
	elif args.command == "getknownhosts":
		ret = remad.getknownhosts(args.outfile, args.outbase64)
	else:
		ret = 127

	return ret



if __name__ == "__main__":
	sys.exit(main())
